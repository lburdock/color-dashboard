{"version":3,"sources":["webpack:///./src/components/accessibility-grid/styles.js","webpack:///./src/components/accessibility-grid/contrast-status.js","webpack:///./src/components/accessibility-grid/accessibility-grid.js","webpack:///./src/components/accessibility-grid/contrast-requirements-grid.js","webpack:///./src/components/modals/basic/index.js","webpack:///./src/components/pages/accessibility/info-modal.js","webpack:///./src/components/pages/accessibility/accessibility-section.js","webpack:///./src/utils/color/luminance/find-color-with-luminance.js","webpack:///./src/utils/color/luminance/get-max-lower-luminance.js","webpack:///./src/utils/color/luminance/get-min-greater-luminance.js","webpack:///./src/utils/color/get-accessible-color-options.js","webpack:///./src/components/pages/accessibility/get-accessibility-levels.js","webpack:///./src/components/pages/accessibility/index.js","webpack:///./src/pages/accessibility.js"],"names":["TextColorProvider","styled","span","color","LargeTextBig","LargeTextBold","NormalTextBig","NormalTextBold","Tag","div","theme","borderRadius","DangerTag","colors","danger","WarningTag","minTextGray","SuccessTag","success","NotApplicable","ThreeColumnGrid","Grid","GridHeaderItem","textAlign","GridHeaderMain","GridHeaderSub","GridItem","Example","background","Spacer","StyledInput","input","borderColor","StyledIconWrapper","IconWrapper","ContrastStatus","pass","useWarning","columns","text","align","subtext","AccessibilityGrid","AA","AAA","AALarge","AAALarge","AALargeContrastStatus","backgroundColorString","contrastScores","foregroundColorString","props","rowData","id","type","example","aa","aaa","size","aria-hidden","icon","map","column","key","row","Fragment","InfoGrid","BasicModal","children","closeModal","ModalContent","className","aria-label","onClick","Heading","addSpace","cn","InfoModal","useModalState","openModal","showModal","as","InvisibleButton","href","AccessibilitySection","hasTopMargin","Level","Label","AutoWidthBox","getContrast","meetsContrastGuidelines","changeColorLightness","match","targetLuminance","start","stop","lowerStart","percent","newColor","setLightness","newColorLuminance","getLuminance","findColorWithLuminance","hslColor","parseToHsl","lightnessPercent","Math","round","lightness","getMaxLowerLuminance","contrast","greaterLuminance","lowerLuminance","undefined","getMinGreaterLuminance","getAccessibleColorOptions","options","color0","color1","luminance0","luminance1","firstColorIsLighter","minGreaterLuminance","push","maxLowerLuminance","getAccessibilityLevels","label","description","filter","item","length","initColors","AccessibilityChecker","navigate","useNavigate","addRecentColor","useRecentColorsDispatch","searchParamColors","useSearchParameters","useState","setColors","accessibilityLevels","useEffect","slice","handleColorUpdate","updatedColors","formatColorSearchParams","replace","updateColor","index","updateItemByIndex","GlobalStyle","initColor","name","onUpdate","level","SectionWrapper","isHighlighted","colorString","createGlobalStyle","lightBackground","breakpoints","mobile","section","successBackground","AccessibilityPage","title"],"mappings":"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","file":"component---src-pages-accessibility-js-f79f98fdf6ae92f48862.js","sourcesContent":["import styled from \"styled-components\";\nimport { IconWrapper } from \"../icon\";\n\nexport const TextColorProvider = styled.span`\n  color: ${({ color }) => color};\n`;\n\nexport const LargeTextBig = styled.span`\n  font-size: 18pt;\n`;\n\nexport const LargeTextBold = styled.span`\n  font-size: 14pt;\n  font-weight: bold;\n`;\n\nexport const NormalTextBig = styled.span`\n  font-size: 17pt;\n`;\n\nexport const NormalTextBold = styled.span`\n  font-size: 13pt;\n  font-weight: bold;\n`;\n\nexport const Tag = styled.div`\n  border-radius: ${({ theme }) => theme.borderRadius};\n  color: white;\n  font-weight: bold;\n  min-width: 4rem;\n  padding: 0.3rem 0.5rem;\n`;\n\nexport const DangerTag = styled(Tag)`\n  background-color: ${({ theme }) => theme.colors.danger};\n`;\n\nexport const WarningTag = styled(Tag)`\n  background-color: ${({ theme }) => theme.colors.minTextGray};\n`;\n\nexport const SuccessTag = styled(Tag)`\n  background-color: ${({ theme }) => theme.colors.success};\n`;\n\nexport const NotApplicable = styled.span`\n  color: ${({ theme }) => theme.colors.minTextGray};\n  font-style: italic;\n`;\n\nexport const ThreeColumnGrid = styled.div`\n  align-items: center;\n  column-gap: 1rem;\n  display: grid;\n  grid-template-columns: repeat(3, max-content);\n  row-gap: 0.5rem;\n`;\n\nexport const Grid = styled.div`\n  align-items: center;\n  column-gap: 1rem;\n  display: grid;\n  grid-template-columns: repeat(4, max-content);\n  row-gap: 0.5rem;\n\n  @media (max-width: 660px) {\n    grid-template-columns: repeat(3, max-content);\n\n    > :nth-child(4n) {\n      display: none;\n    }\n  }\n`;\n\nexport const GridHeaderItem = styled.div`\n  font-size: 0.8rem;\n  ${({ textAlign }) => textAlign && `text-align: ${textAlign}`};\n`;\n\nexport const GridHeaderMain = styled.div`\n  font-weight: bold;\n  text-transform: uppercase;\n`;\n\nexport const GridHeaderSub = styled.div`\n  font-size: 0.7rem;\n  font-style: italic;\n  margin-top: -0.25rem;\n`;\n\nexport const GridItem = styled.div`\n  ${({ textAlign }) => textAlign && `text-align: ${textAlign}`};\n`;\n\nexport const Example = styled(GridItem)`\n  align-items: center;\n  background: ${({ background }) => background};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  display: inline-flex;\n  padding: 0.5rem;\n`;\n\nexport const Spacer = styled.span`\n  margin: 0 0.5rem;\n\n  &:after {\n    content: \"\\\\2022\";\n  }\n`;\n\nexport const StyledInput = styled.input`\n  border: 1px solid ${({ borderColor }) => borderColor};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  box-shadow: none;\n  box-sizing: border-box;\n  padding: 0.25rem;\n`;\n\nexport const StyledIconWrapper = styled(IconWrapper)`\n  color: ${({ color }) => color};\n`;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { DangerTag, SuccessTag, WarningTag } from \"./styles\";\n\n/**\n * Returns a success or failure tag\n */\nconst ContrastStatus = ({ pass, useWarning }) => {\n  if (pass) return <SuccessTag>Pass</SuccessTag>;\n\n  if (useWarning) return <WarningTag>Fail</WarningTag>;\n\n  return <DangerTag>Fail</DangerTag>;\n}\n\nexport default ContrastStatus;\n\nContrastStatus.propTypes = {\n  pass: PropTypes.bool.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Icon } from \"../icon\";\nimport ContrastStatus from \"./contrast-status\";\nimport {\n  Example,\n  Grid,\n  GridHeaderItem,\n  GridHeaderMain,\n  GridHeaderSub,\n  GridItem,\n  LargeTextBig,\n  LargeTextBold,\n  NormalTextBig,\n  NormalTextBold,\n  NotApplicable,\n  Spacer,\n  StyledIconWrapper,\n  StyledInput,\n  TextColorProvider,\n} from \"./styles\";\n\nconst columns = [\n  { text: \"Type\", align: \"left\" },\n  { text: \"AA\", align: \"center\" },\n  { text: \"AAA\", subtext: \"(optional)\", align: \"center\" },\n  { text: \"Example\", align: \"left\" },\n];\n\n/**\n * Returns a list of table row data\n * @param {string} color The foreground color\n * @param {object} contrastScores An object that shows which contrast guidelines have been met\n */\nconst getRowData = (color, { AA, AAA, AALarge, AAALarge }) => {\n  const AALargeContrastStatus = <ContrastStatus pass={AALarge} />;\n  return [\n    {\n      id: \"normal\",\n      type: \"Normal text\",\n      example: (\n        <TextColorProvider color={color}>\n          <NormalTextBig>17pt text</NormalTextBig>\n          <Spacer />\n          <NormalTextBold>13pt bold text</NormalTextBold>\n        </TextColorProvider>\n      ),\n      aa: <ContrastStatus pass={AA} />,\n      aaa: <ContrastStatus pass={AAA} useWarning />,\n    },\n    {\n      id: \"large\",\n      type: \"Large text\",\n      example: (\n        <TextColorProvider color={color}>\n          <LargeTextBig>18pt text</LargeTextBig>\n          <Spacer />\n          <LargeTextBold>14pt bold text</LargeTextBold>\n        </TextColorProvider>\n      ),\n      aa: AALargeContrastStatus,\n      aaa: <ContrastStatus pass={AAALarge} useWarning />,\n    },\n    {\n      id: \"ui\",\n      type: \"UI Component\",\n      example: <StyledInput borderColor={color} />,\n      aa: AALargeContrastStatus,\n      aaa: <NotApplicable>N/A</NotApplicable>,\n    },\n    {\n      id: \"icon\",\n      type: \"Graphical Object\",\n      example: (\n        <StyledIconWrapper color={color} size=\"small\">\n          <Icon aria-hidden=\"true\" icon=\"fas fa-heart\" />\n        </StyledIconWrapper>\n      ),\n      aa: AALargeContrastStatus,\n      aaa: <NotApplicable>N/A</NotApplicable>,\n    },\n  ];\n};\n\n/**\n * Returns a table that shows which contrast guidelines have been met\n */\nconst AccessibilityGrid = ({\n  backgroundColorString,\n  contrastScores,\n  foregroundColorString,\n  ...props\n}) => {\n  const rowData = getRowData(foregroundColorString, contrastScores);\n  return (\n    <Grid {...props}>\n      {columns.map(column => (\n        <GridHeaderItem key={column.text} textAlign={column.align}>\n          <GridHeaderMain>{column.text}</GridHeaderMain>\n          {column.subtext && <GridHeaderSub>{column.subtext}</GridHeaderSub>}\n        </GridHeaderItem>\n      ))}\n      {rowData.map(row => (\n        <React.Fragment key={row.id}>\n          <GridItem>{row.type}</GridItem>\n          <GridItem textAlign=\"center\">{row.aa}</GridItem>\n          <GridItem textAlign=\"center\">{row.aaa}</GridItem>\n          <GridItem>\n            <Example background={backgroundColorString}>{row.example}</Example>\n          </GridItem>\n        </React.Fragment>\n      ))}\n    </Grid>\n  );\n};\n\nexport default AccessibilityGrid;\n\nAccessibilityGrid.propTypes = {\n  backgroundColorString: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  contrastScores: PropTypes.shape({\n    AA: PropTypes.bool,\n    AAA: PropTypes.bool,\n    AALarge: PropTypes.bool,\n    AAALarge: PropTypes.bool,\n  }),\n  foregroundColorString: PropTypes.string.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport {\n  code,\n  GridHeaderItem,\n  GridItem,\n  NotApplicable,\n  ThreeColumnGrid,\n} from \"./styles\";\n\nconst columns = [\n  { text: \"Type\", align: \"left\" },\n  { text: \"Level AA\", align: \"center\" },\n  { text: \"Level AAA\", align: \"center\" },\n];\n\nconst rowData = [\n  {\n    id: \"normal\",\n    type: \"Normal text\",\n    aa: <code>4.5:1</code>,\n    aaa: <code>7:1</code>,\n  },\n  {\n    id: \"large\",\n    type: \"Large text\",\n    aa: <code>3:1</code>,\n    aaa: <code>4.5:1</code>,\n  },\n  {\n    id: \"ui\",\n    type: \"UI Component\",\n    aa: <code>3:1</code>,\n    aaa: <NotApplicable>N/A</NotApplicable>,\n  },\n  {\n    id: \"icon\",\n    type: \"Graphical Object\",\n    aa: <code>3:1</code>,\n    aaa: <NotApplicable>N/A</NotApplicable>,\n  },\n];\n\n/**\n * Returns a table with info about contrast guidelines\n */\nconst InfoGrid = props => {\n  return (\n    <ThreeColumnGrid {...props}>\n      {columns.map(column => (\n        <GridHeaderItem key={column.text} textAlign={column.align}>\n          {column.text}\n        </GridHeaderItem>\n      ))}\n      {rowData.map(row => (\n        <React.Fragment key={row.id}>\n          <GridItem>{row.type}</GridItem>\n          <GridItem textAlign=\"center\">{row.aa}</GridItem>\n          <GridItem textAlign=\"center\">{row.aaa}</GridItem>\n        </React.Fragment>\n      ))}\n    </ThreeColumnGrid>\n  );\n};\n\nexport default InfoGrid;\n\nInfoGrid.propTypes = {\n  className: PropTypes.string,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport ModalContainer from \"../components/modal-container\";\n\n/**\n * Renders the basic modal (white box over with a black overlay)\n */\nconst BasicModal = ({ children, closeModal, ...props }) => {\n  return (\n    <ModalContainer closeModal={closeModal} {...props}>\n      <ModalContent className=\"modal-content box\">{children}</ModalContent>\n      <button\n        aria-label=\"Close\"\n        className=\"modal-close is-large\"\n        onClick={closeModal}\n      ></button>\n    </ModalContainer>\n  );\n};\n\nexport default BasicModal;\n\nBasicModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  showModal: PropTypes.bool,\n};\n\nconst ModalContent = styled.div`\n  margin-bottom: 0 !important;\n`;\n","import React from \"react\";\nimport useModalState from \"../../../state/modal-hook\";\nimport cn from \"../../../utils/cn\";\nimport { ContrastRequirementsGrid } from \"../../accessibility-grid\";\nimport { InvisibleButton } from \"../../buttons/invisible\";\nimport ExternalLink from \"../../external-link\";\nimport { Icon, IconWrapper } from \"../../icon\";\nimport BasicModal from \"../../modals/basic\";\n\nconst Heading = ({ children, addSpace }) => (\n  <h1 className={cn(\"is-5 has-text-weight-bold mb-3\", addSpace && \"mt-3\")}>\n    {children}\n  </h1>\n);\n\n/**\n * Modal the explains contrast and accessibility\n */\nconst InfoModal = () => {\n  const { closeModal, openModal, showModal } = useModalState();\n  return (\n    <>\n      <IconWrapper as={InvisibleButton} aria-label=\"About\" onClick={openModal}>\n        <Icon aria-hidden=\"true\" icon=\"fas fa-info-circle\" />\n      </IconWrapper>\n\n      <BasicModal closeModal={closeModal} showModal={showModal}>\n        <Heading>About this page</Heading>\n        <p>\n          This page calculates the contrast between your color selections to\n          determine if they are accessible for your users. If they aren't, it\n          suggests similar colors that are.\n        </p>\n        <Heading addSpace>What is contrast?</Heading>\n        <p>\n          The contrast between two colors is determined by the difference in\n          luminance between them. Contrast is expressed as a ratio. This ratio\n          can range from <code>1:1</code> (e.g., white text on a white\n          background) to <code>21:1</code> (e.g., black text on a white\n          background).\n        </p>\n        <Heading addSpace>About contrast and accessibility</Heading>\n        <p>\n          The color contrast between elements on a webpage must meet the minimum\n          contrast values (called <strong>Level AA</strong>) to be considered\n          accessible. This minimum contrast value is not the same for all\n          elements. For example, large text has a lower contrast requirement\n          since the size of the text makes it easier to see. These requirement\n          are outlined in the{\" \"}\n          <ExternalLink href=\"https://www.w3.org/TR/WCAG21/\">\n            WCAG 2.1 guidelines\n          </ExternalLink>\n          . The guidelines also provide contrast values for an optional enhanced\n          accessibility level, called <strong>Level AAA</strong>. The chart\n          below shows the minimum contrast needed for different components.\n        </p>\n\n        <Heading addSpace>Contrast value requirements</Heading>\n        <ContrastRequirementsGrid />\n      </BasicModal>\n    </>\n  );\n};\n\nexport default InfoModal;\n","import PropTypes from \"prop-types\";\nimport { getContrast, meetsContrastGuidelines } from \"polished\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport AccessibilityGrid from \"../../accessibility-grid\";\n\n/**\n * Displays a horizontal section with colors on the left and the accessibility on the right\n */\nconst AccessibilitySection = ({ children, colors, hasTopMargin }) => {\n  return (\n    <Level hasTopMargin={hasTopMargin}>\n      <div>\n        <Label>Colors</Label>\n        <div className=\"is-align-items-center is-flex is-flex-wrap-nowrap\">\n          {children}\n        </div>\n      </div>\n      <div>\n        <Label>Contrast</Label>\n        <AutoWidthBox className=\"box\">\n          <div className=\"is-size-3 has-text-weight-semibold\">\n            {getContrast(...colors)}:1\n          </div>\n        </AutoWidthBox>\n\n        <Label>Accessibility scores</Label>\n        <AutoWidthBox className=\"box\">\n          <AccessibilityGrid\n            backgroundColorString={colors[0]}\n            foregroundColorString={colors[1]}\n            contrastScores={meetsContrastGuidelines(...colors)}\n          />\n        </AutoWidthBox>\n      </div>\n    </Level>\n  );\n};\n\nexport default AccessibilitySection;\n\nAccessibilitySection.propTypes = {\n  children: PropTypes.node.isRequired,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  hasTopMargin: PropTypes.bool,\n};\n\nconst AutoWidthBox = styled.div`\n  display: table;\n`;\n\nconst Label = styled.div`\n  border-top: 1px solid #b3b3b3;\n  color: #4a4a4a;\n  font-size: 0.8rem;\n  padding: 0.25rem 0;\n  text-transform: uppercase;\n`;\n\nconst Level = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  ${({ hasTopMargin }) => (hasTopMargin ? \"margin-top: 5rem;\" : \"\")};\n\n  & > *:not(:last-child) {\n    margin-right: 1rem;\n  }\n\n  @media (max-width: 1215px) {\n    flex-direction: column;\n    & > *:not(:last-child) {\n      margin-right: 0;\n    }\n  }\n`;\n","import { getLuminance, parseToHsl, setLightness } from \"polished\";\n\n/**\n * Adjusts a color's lightness in 1% increments to match a target luminance.\n *\n * @param {string} color The color to adjust\n * @param {number} targetLuminance The desired luminance (float between 0 and 1) of the adjusted color\n * @param {number} start The lightness percent to start testing at\n * @param {number} stop The lightness percent to stop testing at\n *\n * @returns {string} The adjusted color\n */\nconst changeColorLightness = ({ color, targetLuminance, start, stop }) => {\n  const lowerStart = start < stop;\n  let match;\n  for (\n    let percent = start;\n    lowerStart ? percent <= stop : percent >= stop;\n    lowerStart ? percent++ : percent--\n  ) {\n    const newColor = setLightness(percent / 100, color);\n    const newColorLuminance = getLuminance(newColor);\n    const meetsTargetLuminance = lowerStart\n      ? newColorLuminance >= targetLuminance\n      : newColorLuminance <= targetLuminance;\n\n    if (meetsTargetLuminance) break;\n\n    match = newColor;\n  }\n\n  return match;\n};\n\n/**\n * Background:\n *   - The lightness of a color can be between 0 and 100%.\n *   - A color with 0% lightness is black and a color with 100% is white.\n *   - Adjusting the lightness of a color changes the color's luminance\n *\n * This function takes a color and increases or decreases the lightness to meet the target luminance\n * @param {string} color The color to adjust\n * @param {number} targetLuminance The desired luminance (float between 0 and 1) of the adjusted color\n *\n * @returns {string} The adjusted color\n */\nconst findColorWithLuminance = (color, targetLuminance) => {\n  // Handle edge cases\n  if (targetLuminance === 0) return \"#000\";\n  if (targetLuminance === 1) return \"#fff\";\n\n  const hslColor = parseToHsl(color);\n  const lightnessPercent = Math.round(hslColor.lightness * 100);\n\n  return getLuminance(color) > targetLuminance\n    ? // Decrease the lightness\n      changeColorLightness({\n        color,\n        targetLuminance,\n        start: 0,\n        stop: lightnessPercent,\n      })\n    : // Increase the lightness\n      changeColorLightness({\n        color,\n        targetLuminance,\n        stop: lightnessPercent,\n        start: 100,\n      });\n};\n\nexport default findColorWithLuminance;\n","/**\n * Finds the lower luminance needed to reach the desired contrast ratio\n * Formula: (greaterLuminance + 0.05) / (lowerLuminance + 0.05) > contrast ratio\n * @param {number} contrast The desired contrast ratio\n * @param {number} greaterLuminance The luminance of the lighter color (float between 0 and 1)\n *\n * @returns {number|undefined} The luminance of the darker color (float between 0 and 1) or\n *    undefined if the lower luminance is impossible\n */\nconst getMaxLowerLuminance = (contrast, greaterLuminance) => {\n  const lowerLuminance = (greaterLuminance + 0.05) / contrast - 0.05;\n  return lowerLuminance < 0 ? undefined : lowerLuminance;\n};\n\nexport default getMaxLowerLuminance;\n","/**\n * Finds the greater luminance needed to reach the desired contrast ratio\n * Formula: (greaterLuminance + 0.05) / (lowerLuminance + 0.05) > contrast ratio\n * @param {number} contrast The desired contrast ratio\n * @param {number} lowerLuminance The luminance of the darker color (float between 0 and 1)\n *\n * @returns {number|undefined} The luminance of the lighter color (float between 0 and 1) or\n *    undefined if the greater luminance is impossible\n */\nconst getMinGreaterLuminance = (contrast, lowerLuminance) => {\n  const greaterLuminance = contrast * lowerLuminance + contrast * 0.05 - 0.05;\n  return greaterLuminance > 1 ? undefined : greaterLuminance;\n};\n\nexport default getMinGreaterLuminance;\n","import { getLuminance } from \"polished\";\nimport findColorWithLuminance from \"./luminance/find-color-with-luminance\";\nimport getMaxLowerLuminance from \"./luminance/get-max-lower-luminance\";\nimport getMinGreaterLuminance from \"./luminance/get-min-greater-luminance\";\n\n/**\n * Background:\n *   - Colors are accessible only if there is enough contrast between them.\n *   - The luminance of each color is used to calculate the contrast.\n *   - If the luminance between the two colors is too close, we can either try:\n *       1. lightening the lighter color\n *       2. darkening the darker color\n *\n * @param {array} colors The background and foreground colors to test for accessibility\n * @param {number} contrast The desired contrast ratio between the colors\n */\nconst getAccessibleColorOptions = ({ colors, contrast }) => {\n  let options = [];\n  const [color0, color1] = colors;\n  const [luminance0, luminance1] = colors.map(color => getLuminance(color));\n  const firstColorIsLighter = luminance0 > luminance1;\n\n  /**\n   * Check if we can raise the luminance of the lighter color to meet the contrast requirement.\n   * If so, lighten the color to that luminance and save it to the options array.\n   */\n  const minGreaterLuminance = getMinGreaterLuminance(\n    contrast,\n    firstColorIsLighter ? luminance1 : luminance0\n  );\n\n  if (minGreaterLuminance) {\n    const color = findColorWithLuminance(\n      firstColorIsLighter ? color0 : color1,\n      minGreaterLuminance\n    );\n    if (color) {\n      options.push(firstColorIsLighter ? [color, color1] : [color0, color]);\n    }\n  }\n\n  /**\n   * Check if we can lower the luminance of the darker color to meet the contrast requirement.\n   * If so, darken the color to that luminance and save it to the options array.\n   */\n  const maxLowerLuminance = getMaxLowerLuminance(\n    contrast,\n    firstColorIsLighter ? luminance0 : luminance1\n  );\n  if (maxLowerLuminance) {\n    const color = findColorWithLuminance(\n      firstColorIsLighter ? color1 : color0,\n      maxLowerLuminance\n    );\n    if (color) {\n      options.push(firstColorIsLighter ? [color0, color] : [color, color1]);\n    }\n  }\n\n  return options;\n};\n\nexport default getAccessibleColorOptions;\n","import React from \"react\";\nimport getAccessibleColorOptions from \"../../../utils/color/get-accessible-color-options\";\n\n/**\n * Returns a list of accessible color options (if any exist) that meet each contrast level.\n * These new color options are created by lightening or darkening the provided colors.\n *\n * @param {string} colors The background and foreground colors\n * @param {object} contrastScores An object that shows which contrast guidelines have been met\n */\nconst getAccessibilityLevels = (colors, { AA, AALarge, AAA }) => {\n  return [\n    {\n      id: \"3\",\n      label: \"Level AA: Most components\",\n      description: (\n        <>\n          These color combinations meet the minimum contrast guidelines for most\n          components, <b>except text at smaller sizes</b>.\n        </>\n      ),\n      options: !AALarge\n        ? getAccessibleColorOptions({ contrast: 3, colors })\n        : [],\n    },\n    {\n      id: \"4.5\",\n      label: \"Level AA: All components\",\n      description: (\n        <>\n          These color combinations meet the minimum contrast guidelines for{\" \"}\n          <b>all components</b>.\n        </>\n      ),\n      options: !AA ? getAccessibleColorOptions({ contrast: 4.5, colors }) : [],\n    },\n    {\n      id: \"7\",\n      label: \"Level AAA (optional)\",\n      description: (\n        <>\n          These color combinations meet the <b>optional</b> enhanced contrast\n          guidelines for all components.\n        </>\n      ),\n      options: !AAA ? getAccessibleColorOptions({ contrast: 7, colors }) : [],\n    },\n  ].filter(item => item.options.length);\n};\n\nexport default getAccessibilityLevels;\n","import { useNavigate } from \"@reach/router\";\nimport { meetsContrastGuidelines } from \"polished\";\nimport React, { useEffect, useState } from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport useSearchParameters from \"../../../state/search-parameters-hook\";\nimport { useRecentColorsDispatch } from \"../../../state/recent-colors-context\";\nimport { updateItemByIndex } from \"../../../utils/array\";\nimport { formatColorSearchParams } from \"../../../utils/routing\";\nimport { InvisibleButton } from \"../../buttons/invisible\";\nimport { Icon, IconWrapper } from \"../../icon\";\nimport InfoModal from \"./info-modal\";\nimport InfoSwatch from \"../../swatches/info\";\nimport InfoSwatchWithPicker from \"../../swatches/info-with-color-picker\";\nimport AccessibilitySection from \"./accessibility-section\";\nimport getAccessibilityLevels from \"./get-accessibility-levels\";\n\nconst initColors = [\"#fff\", \"#000\"];\n\n/**\n * This component allows the user to enter a foreground and background color to determine\n * if the colors are accessible.\n *\n * If they aren't, this page provides a list of options that are accessible\n * by lightening or darkening the provided colors.\n */\nconst AccessibilityChecker = () => {\n  const navigate = useNavigate();\n  const addRecentColor = useRecentColorsDispatch();\n  const searchParamColors = useSearchParameters();\n  const [colors, setColors] = useState(initColors);\n  const contrastScores = meetsContrastGuidelines(colors[0], colors[1]);\n  const accessibilityLevels = getAccessibilityLevels(colors, contrastScores);\n\n  // Update the color with the search parameters after load\n  useEffect(() => {\n    if (searchParamColors.length >= 2) {\n      setColors(searchParamColors.slice(0, 2));\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleColorUpdate = updatedColors => {\n    navigate(formatColorSearchParams(updatedColors), { replace: true });\n    setColors(updatedColors);\n  };\n\n  const updateColor = index => newColor => {\n    const updatedColors = updateItemByIndex(colors, index, newColor);\n    handleColorUpdate(updatedColors);\n    addRecentColor(newColor);\n  };\n\n  const swapColors = () => {\n    handleColorUpdate([colors[1], colors[0]]);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <section className=\"hero is-light\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <div className=\"is-flex is-align-items-baseline\">\n              <h1 className=\"title mr-3\">Color accessibility checker</h1>\n              <InfoModal />\n            </div>\n\n            <AccessibilitySection\n              key={`${colors[0]}-${colors[1]}`}\n              colors={colors}\n            >\n              <InfoSwatchWithPicker\n                className=\"mr-3 mb-5\"\n                key={colors[0]}\n                initColor={colors[0]}\n                name=\"Background\"\n                onUpdate={updateColor(0)}\n              />\n              <StyledIconWrapper\n                as={InvisibleButton}\n                aria-label=\"Swap colors\"\n                size=\"small\"\n                onClick={swapColors}\n              >\n                <Icon aria-hidden=\"true\" icon=\"fas fa-sync\" />\n              </StyledIconWrapper>\n              <InfoSwatchWithPicker\n                className=\"ml-3 mb-5\"\n                key={colors[1]}\n                initColor={colors[1]}\n                name=\"Foreground\"\n                onUpdate={updateColor(1)}\n              />\n            </AccessibilitySection>\n          </div>\n        </div>\n      </section>\n\n      {accessibilityLevels.map(level => (\n        <SectionWrapper\n          className=\"hero\"\n          key={level.id}\n          isHighlighted={level.id === \"4.5\"}\n        >\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h2 className=\"title is-3\">{level.label}</h2>\n              <div className=\"subtitle\">{level.description}</div>\n              <div>\n                {level.options.map((options, index) => (\n                  <AccessibilitySection\n                    colors={options}\n                    hasTopMargin={index !== 0}\n                    key={index}\n                  >\n                    <InfoSwatch\n                      name=\"Background\"\n                      className=\"mr-3 mb-5\"\n                      colorString={options[0]}\n                    />\n                    <InfoSwatch\n                      name=\"Foreground\"\n                      className=\"mr-3 mb-5\"\n                      colorString={options[1]}\n                    />\n                  </AccessibilitySection>\n                ))}\n              </div>\n            </div>\n          </div>\n        </SectionWrapper>\n      ))}\n    </>\n  );\n};\n\nexport default AccessibilityChecker;\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    background: ${({ theme }) => theme.colors.lightBackground};\n  }\n`;\n\nconst StyledIconWrapper = styled(IconWrapper)`\n  @media (max-width: ${({ theme }) => theme.breakpoints.mobile}) {\n    display: none;\n  }\n`;\n\nconst SectionWrapper = styled.section`\n  background: ${({ isHighlighted, theme }) =>\n    isHighlighted ? theme.colors.successBackground : \"white\"};\n`;\n","import React from \"react\";\nimport Seo from \"../components/layout/seo\";\nimport AccessibilityChecker from \"../components/pages/accessibility\";\n\nconst AccessibilityPage = () => (\n  <>\n    <Seo\n      title=\"Accessibility Checker\"\n      description=\"Check your foreground and background colors for accessibility. Accessible color combinations will be computed for you if your colors fail.\"\n    />\n    <AccessibilityChecker />\n  </>\n);\n\nexport default AccessibilityPage;\n"],"sourceRoot":""}