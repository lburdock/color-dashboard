{"version":3,"sources":["webpack:///./src/page-content/accessibility/components/accessibility-grid/styles.js","webpack:///./src/page-content/accessibility/components/accessibility-grid/contrast-status.js","webpack:///./src/page-content/accessibility/components/accessibility-grid/accessibility-grid.js","webpack:///./src/page-content/accessibility/components/accessibility-grid/contrast-requirements-grid.js","webpack:///./src/page-content/accessibility/components/accessibility-section.js","webpack:///./src/utils/color/luminance/find-color-with-luminance.js","webpack:///./src/utils/color/luminance/get-max-lower-luminance.js","webpack:///./src/utils/color/luminance/get-min-greater-luminance.js","webpack:///./src/utils/color/get-accessible-color-options.js","webpack:///./src/page-content/accessibility/components/get-accessibility-levels.js","webpack:///./src/components/modals/basic/index.js","webpack:///./src/page-content/accessibility/components/info-modal.js","webpack:///./src/page-content/accessibility/index.js","webpack:///./src/pages/accessibility.js"],"names":["CustomColor","styled","span","color","CustomFontSize","fontSize","Tag","div","theme","borderRadius","DangerTag","colors","danger","WarningTag","minTextGray","SuccessTag","success","NotApplicable","CommonGrid","ThreeColumnGrid","Grid","GridHeaderItem","GridHeaderSub","Example","background","StyledInput","input","ContrastStatus","pass","useWarning","Spacer","className","columns","text","alignClass","subtitle","AccessibilityGrid","foregroundColor","AA","AAA","AALarge","AAALarge","AALargeContrastStatus","backgroundColorString","contrastScores","foregroundColorString","props","rowData","id","type","example","aa","aaa","as","IconWrapper","size","aria-hidden","icon","map","column","key","row","Fragment","InfoGrid","AccessibilitySection","children","hasTopMargin","label","Level","Label","AutoWidthBox","getContrast","meetsContrastGuidelines","changeColorLightness","match","targetLuminance","start","stop","lowerStart","percent","newColor","setLightness","newColorLuminance","getLuminance","findColorWithLuminance","hslColor","parseToHsl","lightnessPercent","Math","round","lightness","getMaxLowerLuminance","contrast","greaterLuminance","lowerLuminance","undefined","getMinGreaterLuminance","getAccessibleColorOptions","options","color0","color1","luminance0","luminance1","firstColorIsLighter","minGreaterLuminance","optionItem","push","maxLowerLuminance","getAccessibilityLevels","description","filter","item","length","BasicModal","closeModal","aria-label","onClick","Heading","addSpace","cn","InfoModal","useModalState","openModal","showModal","InvisibleButton","href","initColors","FALLBACK_COLOR","AccessibilityChecker","useColorState","palette","accessibility","slice","dispatch","useColorDispatch","accessibilityLevels","updateColor","index","updateAccessibilityColor","currentColors","name","onUpdate","swapAccessibilityColor","level","option","colorString","AccessibilityPage","title"],"mappings":"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","file":"component---src-pages-accessibility-js-f88a67b9f51ac9995ec4.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const CustomColor = styled.span`\n  color: ${({ color }) => color};\n`;\n\nexport const CustomFontSize = styled.span`\n  font-size: ${({ fontSize }) => fontSize};\n`;\n\nconst Tag = styled.div`\n  border-radius: ${({ theme }) => theme.borderRadius};\n  color: white;\n  font-weight: bold;\n  min-width: 4rem;\n  padding: 0.3rem 0.5rem;\n`;\n\nexport const DangerTag = styled(Tag)`\n  background-color: ${({ theme }) => theme.colors.danger};\n`;\n\nexport const WarningTag = styled(Tag)`\n  background-color: ${({ theme }) => theme.colors.minTextGray};\n`;\n\nexport const SuccessTag = styled(Tag)`\n  background-color: ${({ theme }) => theme.colors.success};\n`;\n\nexport const NotApplicable = styled.span`\n  color: ${({ theme }) => theme.colors.minTextGray};\n  font-style: italic;\n`;\n\nconst CommonGrid = styled.div`\n  align-items: center;\n  column-gap: 1rem;\n  display: grid;\n  row-gap: 0.5rem;\n`;\n\nexport const ThreeColumnGrid = styled(CommonGrid)`\n  grid-template-columns: repeat(3, max-content);\n`;\n\nexport const Grid = styled(CommonGrid)`\n  grid-template-columns: repeat(4, max-content);\n\n  @media (max-width: 660px) {\n    grid-template-columns: repeat(3, max-content);\n\n    > :nth-child(4n) {\n      display: none;\n    }\n  }\n`;\n\nexport const GridHeaderItem = styled.div`\n  font-size: 0.8rem;\n`;\n\nexport const GridHeaderSub = styled.div`\n  margin-top: -0.25rem;\n`;\n\nexport const Example = styled.div`\n  align-items: center;\n  background: ${({ background }) => background};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  display: inline-flex;\n  padding: 0.5rem;\n`;\n\nexport const StyledInput = styled.input`\n  all: unset;\n  border: 1px solid ${({ color }) => color};\n  color: ${({ color }) => color};\n  font-size: 0.875rem;\n  padding: 0.25rem 0.5rem;\n`;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { DangerTag, SuccessTag, WarningTag } from \"./styles\";\n\n/**\n * Returns a success or failure tag\n */\nconst ContrastStatus = ({ pass, useWarning }) => {\n  if (pass) return <SuccessTag>Pass</SuccessTag>;\n\n  if (useWarning) return <WarningTag>Fail</WarningTag>;\n\n  return <DangerTag>Fail</DangerTag>;\n}\n\nexport default ContrastStatus;\n\nContrastStatus.propTypes = {\n  pass: PropTypes.bool.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Icon, IconWrapper } from \"../../../../components/icon\";\nimport ContrastStatus from \"./contrast-status\";\nimport {\n  Example,\n  Grid,\n  GridHeaderItem,\n  GridHeaderSub,\n  NotApplicable,\n  StyledInput,\n  CustomColor,\n  CustomFontSize,\n} from \"./styles\";\n\nconst Spacer = () => <span className=\"mx-1\">•</span>;\n\nconst columns = [\n  { text: \"Type\" },\n  { text: \"AA\", alignClass: \"has-text-centered\" },\n  { text: \"AAA\", subtitle: \"(optional)\", alignClass: \"has-text-centered\" },\n  { text: \"Example\" },\n];\n\n/**\n * Returns a list of table row data\n * @param {string} foregroundColor The foreground color\n * @param {object} contrastScores An object that shows which contrast guidelines have been met\n */\nconst getRowData = (foregroundColor, { AA, AAA, AALarge, AAALarge }) => {\n  const AALargeContrastStatus = <ContrastStatus pass={AALarge} />;\n  return [\n    {\n      id: \"normal\",\n      type: \"Normal text\",\n      example: (\n        <CustomColor color={foregroundColor}>\n          <CustomFontSize fontSize=\"17pt\">17pt text</CustomFontSize>\n          <Spacer />\n          <CustomFontSize className=\"has-text-weight-bold\" fontSize=\"13pt\">\n            13pt bold text\n          </CustomFontSize>\n        </CustomColor>\n      ),\n      aa: <ContrastStatus pass={AA} />,\n      aaa: <ContrastStatus pass={AAA} useWarning />,\n    },\n    {\n      id: \"large\",\n      type: \"Large text\",\n      example: (\n        <CustomColor color={foregroundColor}>\n          <CustomFontSize fontSize=\"18pt\">18pt text</CustomFontSize>\n          <Spacer />\n          <CustomFontSize className=\"has-text-weight-bold\" fontSize=\"14pt\">\n            14pt bold text\n          </CustomFontSize>\n        </CustomColor>\n      ),\n      aa: AALargeContrastStatus,\n      aaa: <ContrastStatus pass={AAALarge} useWarning />,\n    },\n    {\n      id: \"ui\",\n      type: \"UI Component\",\n      example: <StyledInput color={foregroundColor} />,\n      aa: AALargeContrastStatus,\n      aaa: <NotApplicable>N/A</NotApplicable>,\n    },\n    {\n      id: \"icon\",\n      type: \"Graphical Object\",\n      example: (\n        <CustomColor as={IconWrapper} color={foregroundColor} size=\"small\">\n          <Icon aria-hidden=\"true\" icon=\"fas fa-heart\" />\n        </CustomColor>\n      ),\n      aa: AALargeContrastStatus,\n      aaa: <NotApplicable>N/A</NotApplicable>,\n    },\n  ];\n};\n\n/**\n * Returns a table that shows which contrast guidelines have been met\n */\nconst AccessibilityGrid = ({\n  backgroundColorString,\n  contrastScores,\n  foregroundColorString,\n  ...props\n}) => {\n  const rowData = getRowData(foregroundColorString, contrastScores);\n  return (\n    <Grid {...props}>\n      {columns.map(column => (\n        <GridHeaderItem key={column.text} className={column.alignClass}>\n          <div className=\"has-text-weight-bold is-uppercase\">{column.text}</div>\n          {column.subtitle && (\n            <GridHeaderSub className=\"is-italic is-size-7\">\n              {column.subtitle}\n            </GridHeaderSub>\n          )}\n        </GridHeaderItem>\n      ))}\n      {rowData.map(row => (\n        <React.Fragment key={row.id}>\n          <div>{row.type}</div>\n          <div className=\"has-text-centered\">{row.aa}</div>\n          <div className=\"has-text-centered\">{row.aaa}</div>\n          <div>\n            <Example background={backgroundColorString}>{row.example}</Example>\n          </div>\n        </React.Fragment>\n      ))}\n    </Grid>\n  );\n};\n\nexport default AccessibilityGrid;\n\nAccessibilityGrid.propTypes = {\n  backgroundColorString: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  contrastScores: PropTypes.shape({\n    AA: PropTypes.bool,\n    AAA: PropTypes.bool,\n    AALarge: PropTypes.bool,\n    AAALarge: PropTypes.bool,\n  }),\n  foregroundColorString: PropTypes.string.isRequired,\n};\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { GridHeaderItem, NotApplicable, ThreeColumnGrid } from \"./styles\";\n\nconst columns = [\n  { text: \"Type\" },\n  { text: \"Level AA\", alignClass: \"has-text-centered\" },\n  { text: \"Level AAA\", alignClass: \"has-text-centered\" },\n];\n\nconst rowData = [\n  {\n    id: \"normal\",\n    type: \"Normal text\",\n    aa: <code>4.5:1</code>,\n    aaa: <code>7:1</code>,\n  },\n  {\n    id: \"large\",\n    type: \"Large text\",\n    aa: <code>3:1</code>,\n    aaa: <code>4.5:1</code>,\n  },\n  {\n    id: \"ui\",\n    type: \"UI Component\",\n    aa: <code>3:1</code>,\n    aaa: <NotApplicable>N/A</NotApplicable>,\n  },\n  {\n    id: \"icon\",\n    type: \"Graphical Object\",\n    aa: <code>3:1</code>,\n    aaa: <NotApplicable>N/A</NotApplicable>,\n  },\n];\n\n/**\n * Returns a table with info about contrast guidelines\n */\nconst InfoGrid = props => {\n  return (\n    <ThreeColumnGrid {...props}>\n      {columns.map(column => (\n        <GridHeaderItem key={column.text} className={column.alignClass}>\n          {column.text}\n        </GridHeaderItem>\n      ))}\n      {rowData.map(row => (\n        <React.Fragment key={row.id}>\n          <div>{row.type}</div>\n          <div className=\"has-text-centered\">{row.aa}</div>\n          <div className=\"has-text-centered\">{row.aaa}</div>\n        </React.Fragment>\n      ))}\n    </ThreeColumnGrid>\n  );\n};\n\nexport default InfoGrid;\n\nInfoGrid.propTypes = {\n  className: PropTypes.string,\n};\n","import PropTypes from \"prop-types\";\nimport { getContrast, meetsContrastGuidelines } from \"polished\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport AccessibilityGrid from \"./accessibility-grid\";\n\n/**\n * Displays a horizontal section with colors on the left and the accessibility on the right\n */\nconst AccessibilitySection = ({\n  children,\n  colors,\n  hasTopMargin,\n  label = \"Colors\",\n}) => {\n  return (\n    <Level hasTopMargin={hasTopMargin}>\n      <div>\n        <Label>{label}</Label>\n        <div className=\"is-align-items-center is-flex is-flex-wrap-nowrap\">\n          {children}\n        </div>\n      </div>\n      <div>\n        <Label>Contrast</Label>\n        <AutoWidthBox className=\"box\">\n          <div className=\"is-size-3 has-text-weight-semibold\">\n            {getContrast(...colors)}:1\n          </div>\n        </AutoWidthBox>\n\n        <Label>Accessibility scores</Label>\n        <AutoWidthBox className=\"box\">\n          <AccessibilityGrid\n            backgroundColorString={colors[0]}\n            foregroundColorString={colors[1]}\n            contrastScores={meetsContrastGuidelines(...colors)}\n          />\n        </AutoWidthBox>\n      </div>\n    </Level>\n  );\n};\n\nexport default AccessibilitySection;\n\nAccessibilitySection.propTypes = {\n  children: PropTypes.node.isRequired,\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n  hasTopMargin: PropTypes.bool,\n  label: PropTypes.string,\n};\n\nconst AutoWidthBox = styled.div`\n  display: table;\n`;\n\nconst Label = styled.div`\n  border-top: 1px solid #999;\n  color: #4a4a4a;\n  font-size: 0.875rem;\n  padding: 0.25rem 0;\n  text-transform: uppercase;\n`;\n\nconst Level = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  ${({ hasTopMargin }) => (hasTopMargin ? \"margin-top: 5rem;\" : \"\")};\n\n  @media (max-width: 1215px) {\n    flex-direction: column;\n  }\n`;\n","import { getLuminance, parseToHsl, setLightness } from \"polished\";\n\n/**\n * Adjusts a color's lightness in 1% increments to match a target luminance.\n *\n * @param {string} color The color to adjust\n * @param {number} targetLuminance The desired luminance (float between 0 and 1) of the adjusted color\n * @param {number} start The lightness percent to start testing at\n * @param {number} stop The lightness percent to stop testing at\n *\n * @returns {string} The adjusted color\n */\nconst changeColorLightness = ({ color, targetLuminance, start, stop }) => {\n  const lowerStart = start < stop;\n  let match;\n  for (\n    let percent = start;\n    lowerStart ? percent <= stop : percent >= stop;\n    lowerStart ? percent++ : percent--\n  ) {\n    const newColor = setLightness(percent / 100, color);\n    const newColorLuminance = getLuminance(newColor);\n    const meetsTargetLuminance = lowerStart\n      ? newColorLuminance >= targetLuminance\n      : newColorLuminance <= targetLuminance;\n\n    if (meetsTargetLuminance) break;\n\n    match = newColor;\n  }\n\n  return match;\n};\n\n/**\n * Background:\n *   - The lightness of a color can be between 0 and 100%.\n *   - A color with 0% lightness is black and a color with 100% is white.\n *   - Adjusting the lightness of a color changes the color's luminance\n *\n * This function takes a color and increases or decreases the lightness to meet the target luminance\n * @param {string} color The color to adjust\n * @param {number} targetLuminance The desired luminance (float between 0 and 1) of the adjusted color\n *\n * @returns {string} The adjusted color\n */\nconst findColorWithLuminance = (color, targetLuminance) => {\n  // Handle edge cases\n  if (targetLuminance === 0) return \"#000\";\n  if (targetLuminance === 1) return \"#fff\";\n\n  const hslColor = parseToHsl(color);\n  const lightnessPercent = Math.round(hslColor.lightness * 100);\n\n  return getLuminance(color) > targetLuminance\n    ? // Decrease the lightness\n      changeColorLightness({\n        color,\n        targetLuminance,\n        start: 0,\n        stop: lightnessPercent,\n      })\n    : // Increase the lightness\n      changeColorLightness({\n        color,\n        targetLuminance,\n        stop: lightnessPercent,\n        start: 100,\n      });\n};\n\nexport default findColorWithLuminance;\n","/**\n * Finds the lower luminance needed to reach the desired contrast ratio\n * Formula: (greaterLuminance + 0.05) / (lowerLuminance + 0.05) > contrast ratio\n * @param {number} contrast The desired contrast ratio\n * @param {number} greaterLuminance The luminance of the lighter color (float between 0 and 1)\n *\n * @returns {number|undefined} The luminance of the darker color (float between 0 and 1) or\n *    undefined if the lower luminance is impossible\n */\nconst getMaxLowerLuminance = (contrast, greaterLuminance) => {\n  const lowerLuminance = (greaterLuminance + 0.05) / contrast - 0.05;\n  return lowerLuminance < 0 ? undefined : lowerLuminance;\n};\n\nexport default getMaxLowerLuminance;\n","/**\n * Finds the greater luminance needed to reach the desired contrast ratio\n * Formula: (greaterLuminance + 0.05) / (lowerLuminance + 0.05) > contrast ratio\n * @param {number} contrast The desired contrast ratio\n * @param {number} lowerLuminance The luminance of the darker color (float between 0 and 1)\n *\n * @returns {number|undefined} The luminance of the lighter color (float between 0 and 1) or\n *    undefined if the greater luminance is impossible\n */\nconst getMinGreaterLuminance = (contrast, lowerLuminance) => {\n  const greaterLuminance = contrast * lowerLuminance + contrast * 0.05 - 0.05;\n  return greaterLuminance > 1 ? undefined : greaterLuminance;\n};\n\nexport default getMinGreaterLuminance;\n","import { getLuminance } from \"polished\";\nimport findColorWithLuminance from \"./luminance/find-color-with-luminance\";\nimport getMaxLowerLuminance from \"./luminance/get-max-lower-luminance\";\nimport getMinGreaterLuminance from \"./luminance/get-min-greater-luminance\";\n\n/**\n * Background:\n *   - Colors are accessible only if there is enough contrast between them.\n *   - The luminance of each color is used to calculate the contrast.\n *   - If the luminance between the two colors is too close, we can either try:\n *       1. lightening the lighter color\n *       2. darkening the darker color\n *\n * @param {array} colors The background and foreground colors to test for accessibility\n * @param {number} contrast The desired contrast ratio between the colors\n */\nconst getAccessibleColorOptions = ({ colors, contrast }) => {\n  let options = [];\n  const [color0, color1] = colors;\n  const [luminance0, luminance1] = colors.map(color => getLuminance(color));\n  const firstColorIsLighter = luminance0 > luminance1;\n\n  /**\n   * Check if we can raise the luminance of the lighter color to meet the contrast requirement.\n   * If so, lighten the color to that luminance and save it to the options array.\n   */\n  const minGreaterLuminance = getMinGreaterLuminance(\n    contrast,\n    firstColorIsLighter ? luminance1 : luminance0\n  );\n\n  if (minGreaterLuminance) {\n    const color = findColorWithLuminance(\n      firstColorIsLighter ? color0 : color1,\n      minGreaterLuminance\n    );\n    if (color) {\n      const optionItem = {\n        colors: firstColorIsLighter ? [color, color1] : [color0, color],\n        text: firstColorIsLighter\n          ? \"Lighter background color\"\n          : \"Lighter foreground color\",\n      };\n      options.push(optionItem);\n    }\n  }\n\n  /**\n   * Check if we can lower the luminance of the darker color to meet the contrast requirement.\n   * If so, darken the color to that luminance and save it to the options array.\n   */\n  const maxLowerLuminance = getMaxLowerLuminance(\n    contrast,\n    firstColorIsLighter ? luminance0 : luminance1\n  );\n  if (maxLowerLuminance) {\n    const color = findColorWithLuminance(\n      firstColorIsLighter ? color1 : color0,\n      maxLowerLuminance\n    );\n    if (color) {\n      const optionItem = {\n        colors: firstColorIsLighter ? [color0, color] : [color, color1],\n        text: firstColorIsLighter\n          ? \"Darker foreground color\"\n          : \"Darker background color\",\n      };\n      options.push(optionItem);\n    }\n  }\n\n  return options;\n};\n\nexport default getAccessibleColorOptions;\n","import React from \"react\";\nimport getAccessibleColorOptions from \"../../../utils/color/get-accessible-color-options\";\n\n/**\n * Returns a list of accessible color options (if any exist) that meet each contrast level.\n * These new color options are created by lightening or darkening the provided colors.\n *\n * @param {string} colors The background and foreground colors\n * @param {object} contrastScores An object that shows which contrast guidelines have been met\n */\nconst getAccessibilityLevels = (colors, { AA, AALarge, AAA }) => {\n  return [\n    {\n      id: \"3\",\n      label: \"Level AA: Most components\",\n      description: (\n        <>\n          These color combinations meet the minimum contrast guidelines for most\n          components, <b>except text at smaller sizes</b>.\n        </>\n      ),\n      options: !AALarge\n        ? getAccessibleColorOptions({ contrast: 3, colors })\n        : [],\n    },\n    {\n      id: \"4.5\",\n      label: \"Level AA: All components\",\n      description: (\n        <>\n          These color combinations meet the minimum contrast guidelines for{\" \"}\n          <b>all components</b>.\n        </>\n      ),\n      options: !AA ? getAccessibleColorOptions({ contrast: 4.5, colors }) : [],\n    },\n    {\n      id: \"7\",\n      label: \"Level AAA (optional)\",\n      description: (\n        <>\n          These color combinations meet the <b>optional</b> enhanced contrast\n          guidelines for all components.\n        </>\n      ),\n      options: !AAA ? getAccessibleColorOptions({ contrast: 7, colors }) : [],\n    },\n  ].filter(item => item.options.length);\n};\n\nexport default getAccessibilityLevels;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport ModalContainer from \"../modal-container\";\n\n/**\n * Renders the basic modal (white box over with a black overlay)\n */\nconst BasicModal = ({ children, closeModal, ...props }) => {\n  return (\n    <ModalContainer closeModal={closeModal} {...props}>\n      <div className=\"modal-content box mb-0\">{children}</div>\n      <button\n        aria-label=\"Close\"\n        className=\"modal-close is-large\"\n        onClick={closeModal}\n      />\n    </ModalContainer>\n  );\n};\n\nexport default BasicModal;\n\nBasicModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  showModal: PropTypes.bool,\n};\n","import React from \"react\";\nimport { InvisibleButton } from \"../../../components/buttons\";\nimport { ExternalLink } from \"../../../components/links\";\nimport { Icon, IconWrapper } from \"../../../components/icon\";\nimport BasicModal from \"../../../components/modals/basic\";\nimport useModalState from \"../../../state/modal-hook\";\nimport cn from \"../../../utils/cn\";\nimport { ContrastRequirementsGrid } from \"./accessibility-grid\";\n\nconst Heading = ({ children, addSpace }) => (\n  <h1 className={cn(\"is-5 has-text-weight-bold mb-3\", addSpace && \"mt-3\")}>\n    {children}\n  </h1>\n);\n\n/**\n * Modal the explains contrast and accessibility\n */\nconst InfoModal = () => {\n  const { closeModal, openModal, showModal } = useModalState();\n  return (\n    <>\n      <IconWrapper as={InvisibleButton} aria-label=\"About\" onClick={openModal}>\n        <Icon aria-hidden=\"true\" icon=\"fas fa-info-circle\" />\n      </IconWrapper>\n\n      <BasicModal closeModal={closeModal} showModal={showModal}>\n        <Heading>About this page</Heading>\n        <p>\n          This page calculates the contrast between your color selections to\n          determine if they are accessible for your users. If they aren't, it\n          suggests similar colors that are.\n        </p>\n        <Heading addSpace>What is contrast?</Heading>\n        <p>\n          The contrast between two colors is determined by the difference in\n          luminance between them. Contrast is expressed as a ratio. This ratio\n          can range from <code>1:1</code> (e.g., white text on a white\n          background) to <code>21:1</code> (e.g., black text on a white\n          background).\n        </p>\n        <Heading addSpace>About contrast and accessibility</Heading>\n        <p>\n          The color contrast between elements on a webpage must meet the minimum\n          contrast values (called <strong>Level AA</strong>) to be considered\n          accessible. This minimum contrast value is not the same for all\n          elements. For example, large text has a lower contrast requirement\n          since the size of the text makes it easier to see. These requirement\n          are outlined in the{\" \"}\n          <ExternalLink href=\"https://www.w3.org/TR/WCAG21/\">\n            WCAG 2.1 guidelines\n          </ExternalLink>\n          . The guidelines also provide contrast values for an optional enhanced\n          accessibility level, called <strong>Level AAA</strong>. The chart\n          below shows the minimum contrast needed for different components.\n        </p>\n\n        <Heading addSpace>Contrast value requirements</Heading>\n        <ContrastRequirementsGrid />\n      </BasicModal>\n    </>\n  );\n};\n\nexport default InfoModal;\n","import { meetsContrastGuidelines } from \"polished\";\nimport React from \"react\";\nimport { InvisibleButton } from \"../../components/buttons\";\nimport { Icon, IconWrapper } from \"../../components/icon\";\nimport { HeroSection } from \"../../components/layout/hero-section\";\nimport InfoSwatch from \"../../components/swatches/info\";\nimport InfoSwatchWithPicker from \"../../components/swatches/info-with-color-picker\";\nimport {\n  useColorDispatch,\n  useColorState,\n  FALLBACK_COLOR,\n} from \"../../state/color-context\";\nimport {\n  updateAccessibilityColor,\n  swapAccessibilityColor,\n} from \"../../state/color-context/actions\";\nimport AccessibilitySection from \"./components/accessibility-section\";\nimport getAccessibilityLevels from \"./components/get-accessibility-levels\";\nimport InfoModal from \"./components/info-modal\";\n\nconst initColors = [FALLBACK_COLOR, \"#000\"];\n\n/**\n * This component allows the user to enter a foreground and background color to determine\n * if the colors are accessible.\n *\n * If they aren't, this page provides a list of options that are accessible\n * by lightening or darkening the provided colors.\n */\nconst AccessibilityChecker = () => {\n  const { palette, accessibility } = useColorState();\n  const colors = [...accessibility, ...palette, ...initColors].slice(0, 2);\n  const dispatch = useColorDispatch();\n  const contrastScores = meetsContrastGuidelines(colors[0], colors[1]);\n  const accessibilityLevels = getAccessibilityLevels(colors, contrastScores);\n\n  const updateColor = index => newColor => {\n    dispatch(\n      updateAccessibilityColor({\n        newColor,\n        currentColors: colors,\n        index,\n      })\n    );\n  };\n\n  const swapColors = () => {\n    dispatch(swapAccessibilityColor({ currentColors: colors }));\n  };\n\n  return (\n    <>\n      <HeroSection>\n        <div className=\"is-flex is-align-items-baseline\">\n          <h1 className=\"title is-4 mr-3\">Color accessibility checker</h1>\n          <InfoModal />\n        </div>\n\n        <AccessibilitySection key={`${colors[0]}-${colors[1]}`} colors={colors}>\n          <InfoSwatchWithPicker\n            className=\"mr-3 mb-5\"\n            key={colors[0]}\n            color={colors[0]}\n            name=\"Background\"\n            onUpdate={updateColor(0)}\n          />\n          <IconWrapper\n            className=\"is-hidden-mobile\"\n            as={InvisibleButton}\n            aria-label=\"Swap colors\"\n            size=\"small\"\n            onClick={swapColors}\n          >\n            <Icon aria-hidden=\"true\" icon=\"fas fa-sync\" />\n          </IconWrapper>\n          <InfoSwatchWithPicker\n            className=\"ml-3 mb-5\"\n            key={colors[1]}\n            color={colors[1]}\n            name=\"Foreground\"\n            onUpdate={updateColor(1)}\n          />\n        </AccessibilitySection>\n      </HeroSection>\n\n      {accessibilityLevels.map(level => (\n        <HeroSection\n          key={level.id}\n          className={\n            level.id === \"4.5\"\n              ? \"has-background-primary-light\"\n              : \"has-background-white\"\n          }\n        >\n          <h2 className=\"title is-4\">{level.label}</h2>\n          <div className=\"subtitle\">{level.description}</div>\n          <div>\n            {level.options.map((option, index) => (\n              <AccessibilitySection\n                label={`Option ${index + 1}: ${option.text}`}\n                colors={option.colors}\n                hasTopMargin={index !== 0}\n                key={index}\n              >\n                <InfoSwatch\n                  name=\"Background\"\n                  className=\"mr-3 mb-5\"\n                  colorString={option.colors[0]}\n                />\n                <InfoSwatch\n                  name=\"Foreground\"\n                  className=\"mr-3 mb-5\"\n                  colorString={option.colors[1]}\n                />\n              </AccessibilitySection>\n            ))}\n          </div>\n        </HeroSection>\n      ))}\n    </>\n  );\n};\n\nexport default AccessibilityChecker;\n","import React from \"react\";\nimport Seo from \"../components/layout/seo\";\nimport AccessibilityChecker from \"../page-content/accessibility\";\n\nconst AccessibilityPage = () => (\n  <>\n    <Seo\n      title=\"Accessibility Checker\"\n      description=\"Check your foreground and background colors for accessibility. Accessible color combinations will be computed for you if your colors fail.\"\n    />\n    <AccessibilityChecker />\n  </>\n);\n\nexport default AccessibilityPage;\n"],"sourceRoot":""}